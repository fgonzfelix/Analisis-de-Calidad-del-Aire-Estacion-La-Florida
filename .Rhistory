# Ajustar automáticamente un modelo SARIMA
modelo_sarima <- arima(datos_entrenamiento, order = c(2,2,1), seasonal = list(order = c(2,3,6), period = 7), include.mean = TRUE)
#Mejor midelo (2,2,1)(3,3,7)
# Ver el resumen del modelo ajustado
summary(modelo_sarima)
# Realizar predicciones con el modelo
predicciones <- forecast(modelo_sarima, h = length(datos_prueba))
#Graficar las predicciones
#plot(predicciones)
#Imprimir las predicciones
print(predicciones$mean)
#Graficamos los datos de prueba y la predicción resultante:
ggplot() +
geom_line(aes(x = 1:length(datos_prueba), y = datos_prueba), color = "blue", linetype = "solid", size = 1) +
geom_line(aes(x = 1:length(predicciones$mean), y = predicciones$mean), color = "red", linetype = "solid", size = 1) +
labs(x = "Índice", y = "Temperatura", title = "Comparación entre datos de prueba y predicción de los ultimos 110 dias.") +
theme_minimal()
# Ajustar automáticamente un modelo SARIMA
modelo_sarima <- arima(datos_entrenamiento, order = c(2,2,1), seasonal = list(order = c(2,3,7), period = 7), include.mean = TRUE)
#Mejor midelo (2,2,1)(3,3,7)
# Ver el resumen del modelo ajustado
summary(modelo_sarima)
# Realizar predicciones con el modelo
predicciones <- forecast(modelo_sarima, h = length(datos_prueba))
#Graficar las predicciones
#plot(predicciones)
#Imprimir las predicciones
print(predicciones$mean)
#Graficamos los datos de prueba y la predicción resultante:
ggplot() +
geom_line(aes(x = 1:length(datos_prueba), y = datos_prueba), color = "blue", linetype = "solid", size = 1) +
geom_line(aes(x = 1:length(predicciones$mean), y = predicciones$mean), color = "red", linetype = "solid", size = 1) +
labs(x = "Índice", y = "Temperatura", title = "Comparación entre datos de prueba y predicción de los ultimos 110 dias.") +
theme_minimal()
# Ajustar automáticamente un modelo SARIMA
modelo_sarima <- arima(datos_entrenamiento, order = c(2,2,1), seasonal = list(order = c(3,3,6), period = 7), include.mean = TRUE)
#Mejor midelo (2,2,1)(3,3,7)
# Ver el resumen del modelo ajustado
summary(modelo_sarima)
# Realizar predicciones con el modelo
predicciones <- forecast(modelo_sarima, h = length(datos_prueba))
#Graficar las predicciones
#plot(predicciones)
#Imprimir las predicciones
print(predicciones$mean)
#Graficamos los datos de prueba y la predicción resultante:
ggplot() +
geom_line(aes(x = 1:length(datos_prueba), y = datos_prueba), color = "blue", linetype = "solid", size = 1) +
geom_line(aes(x = 1:length(predicciones$mean), y = predicciones$mean), color = "red", linetype = "solid", size = 1) +
labs(x = "Índice", y = "Temperatura", title = "Comparación entre datos de prueba y predicción de los ultimos 110 dias.") +
theme_minimal()
# Ajustar automáticamente un modelo SARIMA
modelo_sarima <- arima(datos_entrenamiento, order = c(4,2,1), seasonal = list(order = c(3,3,6), period = 7), include.mean = TRUE)
#Mejor midelo (2,2,1)(3,3,7)
# Ver el resumen del modelo ajustado
summary(modelo_sarima)
# Realizar predicciones con el modelo
predicciones <- forecast(modelo_sarima, h = length(datos_prueba))
#Graficar las predicciones
#plot(predicciones)
#Imprimir las predicciones
print(predicciones$mean)
#Graficamos los datos de prueba y la predicción resultante:
ggplot() +
geom_line(aes(x = 1:length(datos_prueba), y = datos_prueba), color = "blue", linetype = "solid", size = 1) +
geom_line(aes(x = 1:length(predicciones$mean), y = predicciones$mean), color = "red", linetype = "solid", size = 1) +
labs(x = "Índice", y = "Temperatura", title = "Comparación entre datos de prueba y predicción de los ultimos 110 dias.") +
theme_minimal()
# Ajustar automáticamente un modelo SARIMA
modelo_sarima <- arima(datos_entrenamiento, order = c(4,2,1), seasonal = list(order = c(2,3,6), period = 7), include.mean = TRUE)
#Mejor midelo (2,2,1)(3,3,7)
# Ver el resumen del modelo ajustado
summary(modelo_sarima)
# Realizar predicciones con el modelo
predicciones <- forecast(modelo_sarima, h = length(datos_prueba))
#Graficar las predicciones
#plot(predicciones)
#Imprimir las predicciones
print(predicciones$mean)
#Graficamos los datos de prueba y la predicción resultante:
ggplot() +
geom_line(aes(x = 1:length(datos_prueba), y = datos_prueba), color = "blue", linetype = "solid", size = 1) +
geom_line(aes(x = 1:length(predicciones$mean), y = predicciones$mean), color = "red", linetype = "solid", size = 1) +
labs(x = "Índice", y = "Temperatura", title = "Comparación entre datos de prueba y predicción de los ultimos 110 dias.") +
theme_minimal()
# Ajustar automáticamente un modelo SARIMA
modelo_sarima <- arima(datos_entrenamiento, order = c(4,2,1), seasonal = list(order = c(1,3,6), period = 7), include.mean = TRUE)
#Mejor midelo (2,2,1)(3,3,7)
# Ver el resumen del modelo ajustado
summary(modelo_sarima)
# Realizar predicciones con el modelo
predicciones <- forecast(modelo_sarima, h = length(datos_prueba))
#Graficar las predicciones
#plot(predicciones)
#Imprimir las predicciones
print(predicciones$mean)
#Graficamos los datos de prueba y la predicción resultante:
ggplot() +
geom_line(aes(x = 1:length(datos_prueba), y = datos_prueba), color = "blue", linetype = "solid", size = 1) +
geom_line(aes(x = 1:length(predicciones$mean), y = predicciones$mean), color = "red", linetype = "solid", size = 1) +
labs(x = "Índice", y = "Temperatura", title = "Comparación entre datos de prueba y predicción de los ultimos 110 dias.") +
theme_minimal()
# Ajustar automáticamente un modelo SARIMA
modelo_sarima <- arima(datos_entrenamiento, order = c(4,2,1), seasonal = list(order = c(0,3,6), period = 7), include.mean = TRUE)
#Mejor midelo (2,2,1)(3,3,7)
# Ver el resumen del modelo ajustado
summary(modelo_sarima)
# Realizar predicciones con el modelo
predicciones <- forecast(modelo_sarima, h = length(datos_prueba))
#Graficar las predicciones
#plot(predicciones)
#Imprimir las predicciones
print(predicciones$mean)
#Graficamos los datos de prueba y la predicción resultante:
ggplot() +
geom_line(aes(x = 1:length(datos_prueba), y = datos_prueba), color = "blue", linetype = "solid", size = 1) +
geom_line(aes(x = 1:length(predicciones$mean), y = predicciones$mean), color = "red", linetype = "solid", size = 1) +
labs(x = "Índice", y = "Temperatura", title = "Comparación entre datos de prueba y predicción de los ultimos 110 dias.") +
theme_minimal()
# Ajustar automáticamente un modelo SARIMA
modelo_sarima <- arima(datos_entrenamiento, order = c(2,2,1), seasonal = list(order = c(3,3,6), period = 7), include.mean = TRUE)
#Mejor midelo (2,2,1)(3,3,7)
# Ver el resumen del modelo ajustado
summary(modelo_sarima)
# Realizar predicciones con el modelo
predicciones <- forecast(modelo_sarima, h = length(datos_prueba))
#Graficar las predicciones
#plot(predicciones)
#Imprimir las predicciones
print(predicciones$mean)
#Graficamos los datos de prueba y la predicción resultante:
ggplot() +
geom_line(aes(x = 1:length(datos_prueba), y = datos_prueba), color = "blue", linetype = "solid", size = 1) +
geom_line(aes(x = 1:length(predicciones$mean), y = predicciones$mean), color = "red", linetype = "solid", size = 1) +
labs(x = "Índice", y = "Temperatura", title = "Comparación entre datos de prueba y predicción de los ultimos 110 dias.") +
theme_minimal()
# Ajustar automáticamente un modelo SARIMA
modelo_sarima <- arima(datos_entrenamiento, order = c(2,2,1), seasonal = list(order = c(3,3,7), period = 7), include.mean = TRUE)
#Mejor midelo (2,2,1)(3,3,7)
# Ver el resumen del modelo ajustado
summary(modelo_sarima)
# Realizar predicciones con el modelo
predicciones <- forecast(modelo_sarima, h = length(datos_prueba))
#Graficar las predicciones
#plot(predicciones)
#Imprimir las predicciones
print(predicciones$mean)
#Graficamos los datos de prueba y la predicción resultante:
ggplot() +
geom_line(aes(x = 1:length(datos_prueba), y = datos_prueba), color = "blue", linetype = "solid", size = 1) +
geom_line(aes(x = 1:length(predicciones$mean), y = predicciones$mean), color = "red", linetype = "solid", size = 1) +
labs(x = "Índice", y = "Temperatura", title = "Comparación entre datos de prueba y predicción de los ultimos 110 dias.") +
theme_minimal()
# Ajustar automáticamente un modelo SARIMA
modelo_sarima <- arima(datos_entrenamiento, order = c(2,2,1), seasonal = list(order = c(3,3,8), period = 7), include.mean = TRUE)
#Mejor midelo (2,2,1)(3,3,7)
# Ver el resumen del modelo ajustado
summary(modelo_sarima)
# Realizar predicciones con el modelo
predicciones <- forecast(modelo_sarima, h = length(datos_prueba))
#Graficar las predicciones
#plot(predicciones)
#Imprimir las predicciones
print(predicciones$mean)
#Graficamos los datos de prueba y la predicción resultante:
ggplot() +
geom_line(aes(x = 1:length(datos_prueba), y = datos_prueba), color = "blue", linetype = "solid", size = 1) +
geom_line(aes(x = 1:length(predicciones$mean), y = predicciones$mean), color = "red", linetype = "solid", size = 1) +
labs(x = "Índice", y = "Temperatura", title = "Comparación entre datos de prueba y predicción de los ultimos 110 dias.") +
theme_minimal()
# Ajustar automáticamente un modelo SARIMA
modelo_sarima <- arima(datos_entrenamiento, order = c(2,2,1), seasonal = list(order = c(2,3,7), period = 7), include.mean = TRUE)
#Mejor midelo (2,2,1)(3,3,7)
# Ver el resumen del modelo ajustado
summary(modelo_sarima)
# Realizar predicciones con el modelo
predicciones <- forecast(modelo_sarima, h = length(datos_prueba))
#Graficar las predicciones
#plot(predicciones)
#Imprimir las predicciones
print(predicciones$mean)
#Graficamos los datos de prueba y la predicción resultante:
ggplot() +
geom_line(aes(x = 1:length(datos_prueba), y = datos_prueba), color = "blue", linetype = "solid", size = 1) +
geom_line(aes(x = 1:length(predicciones$mean), y = predicciones$mean), color = "red", linetype = "solid", size = 1) +
labs(x = "Índice", y = "Temperatura", title = "Comparación entre datos de prueba y predicción de los ultimos 110 dias.") +
theme_minimal()
# Ajustar automáticamente un modelo SARIMA
modelo_sarima <- arima(datos_entrenamiento, order = c(2,2,1), seasonal = list(order = c(2,2,7), period = 7), include.mean = TRUE)
#Mejor midelo (2,2,1)(3,3,7)
# Ver el resumen del modelo ajustado
summary(modelo_sarima)
# Realizar predicciones con el modelo
predicciones <- forecast(modelo_sarima, h = length(datos_prueba))
#Graficar las predicciones
#plot(predicciones)
#Imprimir las predicciones
print(predicciones$mean)
#Graficamos los datos de prueba y la predicción resultante:
ggplot() +
geom_line(aes(x = 1:length(datos_prueba), y = datos_prueba), color = "blue", linetype = "solid", size = 1) +
geom_line(aes(x = 1:length(predicciones$mean), y = predicciones$mean), color = "red", linetype = "solid", size = 1) +
labs(x = "Índice", y = "Temperatura", title = "Comparación entre datos de prueba y predicción de los ultimos 110 dias.") +
theme_minimal()
# Ajustar automáticamente un modelo SARIMA
modelo_sarima <- arima(datos_entrenamiento, order = c(2,2,1), seasonal = list(order = c(3,2,7), period = 7), include.mean = TRUE)
#Mejor midelo (2,2,1)(3,3,7)
# Ver el resumen del modelo ajustado
summary(modelo_sarima)
# Realizar predicciones con el modelo
predicciones <- forecast(modelo_sarima, h = length(datos_prueba))
#Graficar las predicciones
#plot(predicciones)
#Imprimir las predicciones
print(predicciones$mean)
#Graficamos los datos de prueba y la predicción resultante:
ggplot() +
geom_line(aes(x = 1:length(datos_prueba), y = datos_prueba), color = "blue", linetype = "solid", size = 1) +
geom_line(aes(x = 1:length(predicciones$mean), y = predicciones$mean), color = "red", linetype = "solid", size = 1) +
labs(x = "Índice", y = "Temperatura", title = "Comparación entre datos de prueba y predicción de los ultimos 110 dias.") +
theme_minimal()
# Ajustar automáticamente un modelo SARIMA
modelo_sarima <- arima(datos_entrenamiento, order = c(2,2,1), seasonal = list(order = c(1,2,7), period = 7), include.mean = TRUE)
#Mejor midelo (2,2,1)(3,3,7)
# Ver el resumen del modelo ajustado
summary(modelo_sarima)
# Realizar predicciones con el modelo
predicciones <- forecast(modelo_sarima, h = length(datos_prueba))
#Graficar las predicciones
#plot(predicciones)
#Imprimir las predicciones
print(predicciones$mean)
#Graficamos los datos de prueba y la predicción resultante:
ggplot() +
geom_line(aes(x = 1:length(datos_prueba), y = datos_prueba), color = "blue", linetype = "solid", size = 1) +
geom_line(aes(x = 1:length(predicciones$mean), y = predicciones$mean), color = "red", linetype = "solid", size = 1) +
labs(x = "Índice", y = "Temperatura", title = "Comparación entre datos de prueba y predicción de los ultimos 110 dias.") +
theme_minimal()
# Ajustar automáticamente un modelo SARIMA
modelo_sarima <- arima(datos_entrenamiento, order = c(2,2,1), seasonal = list(order = c(1,3,7), period = 7), include.mean = TRUE)
# Ajustar automáticamente un modelo SARIMA
modelo_sarima <- arima(datos_entrenamiento, order = c(2,2,1), seasonal = list(order = c(2,3,7), period = 7), include.mean = TRUE)
#Mejor midelo (2,2,1)(3,3,7)
# Ver el resumen del modelo ajustado
summary(modelo_sarima)
# Realizar predicciones con el modelo
predicciones <- forecast(modelo_sarima, h = length(datos_prueba))
#Graficar las predicciones
#plot(predicciones)
#Imprimir las predicciones
print(predicciones$mean)
#Graficamos los datos de prueba y la predicción resultante:
ggplot() +
geom_line(aes(x = 1:length(datos_prueba), y = datos_prueba), color = "blue", linetype = "solid", size = 1) +
geom_line(aes(x = 1:length(predicciones$mean), y = predicciones$mean), color = "red", linetype = "solid", size = 1) +
labs(x = "Índice", y = "Temperatura", title = "Comparación entre datos de prueba y predicción de los ultimos 110 dias.") +
theme_minimal()
# Ajustar automáticamente un modelo SARIMA
modelo_sarima <- arima(datos_entrenamiento, order = c(2,2,1), seasonal = list(order = c(3,3,7), period = 7), include.mean = TRUE)
#Mejor midelo (2,2,1)(3,3,7)
# Ver el resumen del modelo ajustado
summary(modelo_sarima)
# Realizar predicciones con el modelo
predicciones <- forecast(modelo_sarima, h = length(datos_prueba))
#Graficar las predicciones
#plot(predicciones)
#Imprimir las predicciones
print(predicciones$mean)
#Graficamos los datos de prueba y la predicción resultante:
ggplot() +
geom_line(aes(x = 1:length(datos_prueba), y = datos_prueba), color = "blue", linetype = "solid", size = 1) +
geom_line(aes(x = 1:length(predicciones$mean), y = predicciones$mean), color = "red", linetype = "solid", size = 1) +
labs(x = "Índice", y = "Temperatura", title = "Comparación entre datos de prueba y predicción de los ultimos 110 dias.") +
theme_minimal()
df_estandar
#Realizamos la prueba de PCA con la función prcom() y vemos un resumen con la función summary():
pca <- prcomp(df_estandar)
pca
#Visualizamos el Screeplot del PCA:
screeplot(pca, main = "Principal component analysis (PCA)")
#Visualizamos los resultados del PCA con un biplot:
biplot(pca, cex = 0, main = "Principal component analysis (PCA) Biplot")
#Dividimos los datos en conjuntos de entrenamiento y prueba
prop_entrenamiento <- 0.9
n_entrenamiento <- round(nrow(df) * prop_entrenamiento)
datos_entrenamiento <- df[1:n_entrenamiento, "Temp"]
datos_prueba <- df[(n_entrenamiento + 1):nrow(df), "Temp"]
# Ajustar automáticamente un modelo SARIMA
modelo_sarima <- arima(datos_entrenamiento, order = c(2,2,1), seasonal = list(order = c(3,3,7), period = 7), include.mean = TRUE)
# Ver el resumen del modelo ajustado
summary(modelo_sarima)
# Realizar predicciones con el modelo
predicciones <- forecast(modelo_sarima, h = length(datos_prueba))
plot(predicciones)
#Imprimir las predicciones
print(predicciones$mean)
#Graficamos los datos de prueba y la predicción resultante:
ggplot() +
geom_line(aes(x = 1:length(datos_prueba), y = datos_prueba), color = "blue", linetype = "solid", size = 1) +
geom_line(aes(x = 1:length(predicciones$mean), y = predicciones$mean), color = "red", linetype = "solid", size = 1) +
labs(x = "Índice", y = "Temperatura", title = "Comparación entre datos de prueba y predicción de los ultimos 110 dias.") +
theme_minimal()
ggplot() +
geom_line(aes(x = 1:length(datos_prueba), y = datos_prueba), color = "blue", linetype = "solid", size = 1) +
geom_line(aes(x = 1:length(predicciones$mean), y = predicciones$mean), color = "red", linetype = "solid", size = 1) +
labs(x = "Dias", y = "Temperatura", title = "Comparación entre datos de prueba y predicción de los ultimos 110 dias.") +
theme_minimal()
View(df_CO)
View(df_CO)
#Graficamos los datos de prueba y la predicción resultante:
ggplot() +
geom_line(aes(x = 1:length(datos_prueba), y = datos_prueba), color = "blue", linetype = "solid", size = 1) +
geom_line(aes(x = 1:length(predicciones$mean), y = predicciones$mean), color = "red", linetype = "solid", size = 1) +
labs(x = "Dias", y = "Temperatura", title = "Comparación entre datos de prueba y predicción de los ultimos 110 dias.(12-09-2017 hasta el 31-12-2017)" +
theme_minimal()
ggplot() +
#Graficamos los datos de prueba y la predicción resultante:
ggplot() +
geom_line(aes(x = 1:length(datos_prueba), y = datos_prueba), color = "blue", linetype = "solid", size = 1) +
geom_line(aes(x = 1:length(predicciones$mean), y = predicciones$mean), color = "red", linetype = "solid", size = 1) +
labs(x = "Dias", y = "Temperatura", title = "Comparación entre datos de prueba y predicción de los ultimos 110 dias.") +
theme_minimal()
#Graficamos los datos de prueba y la predicción resultante:
ggplot() +
geom_line(aes(x = 1:length(datos_prueba), y = datos_prueba), color = "blue", linetype = "solid", size = 1) +
geom_line(aes(x = 1:length(predicciones$mean), y = predicciones$mean), color = "red", linetype = "solid", size = 1) +
labs(x = "Dias", y = "Temperatura", title = "Comparación entre datos de prueba y predicción de los ultimos 110 dias.(12-09-2017 hasta el 31-12-2017)") +
theme_minimal()
#Graficamos los datos de prueba y la predicción resultante:
ggplot() +
geom_line(aes(x = 1:length(datos_prueba), y = datos_prueba), color = "blue", linetype = "solid", size = 1) +
geom_line(aes(x = 1:length(predicciones$mean), y = predicciones$mean), color = "red", linetype = "solid", size = 1) +
labs(x = "Dias", y = "Temperatura", title = "Comparación entre datos de prueba y predicción de los ultimos 110 dias./n(12-09-2017 hasta el 31-12-2017)") +
theme_minimal()
#Graficamos los datos de prueba y la predicción resultante:
ggplot() +
geom_line(aes(x = 1:length(datos_prueba), y = datos_prueba), color = "blue", linetype = "solid", size = 1) +
geom_line(aes(x = 1:length(predicciones$mean), y = predicciones$mean), color = "red", linetype = "solid", size = 1) +
labs(x = "Dias", y = "Temperatura", title = "Comparación entre datos de prueba y predicción de los ultimos 110 dias.\n(12-09-2017 hasta el 31-12-2017)") +
theme_minimal()
#Graficamos los datos de prueba y la predicción resultante:
ggplot() +
geom_line(aes(x = 1:length(datos_prueba), y = datos_prueba), color = "blue", linetype = "solid", size = 1) +
geom_line(aes(x = 1:length(predicciones$mean), y = predicciones$mean), color = "red", linetype = "solid", size = 1) +
labs(x = "Dias", y = "Temperatura", title = "Comparación entre datos de prueba y predicción de los ultimos 110 dias.\n\t\t(12-09-2017 hasta el 31-12-2017)") +
theme_minimal()
ggplot() +
geom_line(aes(x = 1:length(datos_prueba), y = datos_prueba), color = "blue", linetype = "solid", size = 1) +
geom_line(aes(x = 1:length(predicciones$mean), y = predicciones$mean), color = "red", linetype = "solid", size = 1) +
labs(x = "Dias", y = "Temperatura", title = "Comparación entre datos de prueba y predicción de los ultimos 110 dias.\n\t(12-09-2017 hasta el 31-12-2017)") +
theme_minimal()
rm(list = ls())
# Cargamos los datos
df_CO <- read.csv(file = "La_Florida_CO.csv", sep =";", dec = ",", header = TRUE)
df_Humedad <- read.csv(file = "La_Florida_Humedad.csv", sep =";", dec = ",", header = TRUE)
df_NO <- read.csv(file = "La_Florida_NO.csv", sep =";", dec = ",", header = TRUE)
df_NO2 <- read.csv(file = "La_Florida_NO2.csv", sep =";", dec = ",", header = TRUE)
df_NOX <- read.csv(file = "La_Florida_NOX.csv", sep =";", dec = ",", header = TRUE)
df_O3 <- read.csv(file = "La_Florida_O3.csv", sep =";", dec = ",", header = TRUE)
df_SO2 <- read.csv(file = "La_Florida_SO2.csv", sep =";", dec = ",", header = TRUE)
df_MP2_5 <- read.csv(file = "La_Florida_MP2_5.csv", sep =";", dec = ",", header = TRUE)
df_MP10 <- read.csv(file = "La_Florida_MP10.csv", sep =";", dec = ",", header = TRUE)
df_Temperatura <- read.csv(file = "La_Florida_Temperatura.csv", sep =";", dec = ",", header = TRUE)
#Preprocessing
# Convertimos los datos de Temperatura horaria a diaria:
# Convertir las columnas de fecha y hora al formato adecuado
df_Temperatura$HORA..HHMM. <- sprintf("%04d", df_Temperatura$HORA..HHMM.)  # Asegurar que tenga 4 dígitos
df_Temperatura$HORA..HHMM. <- as.POSIXct(strptime(df_Temperatura$HORA..HHMM., format = "%H%M"), format = "%H%M")
df_Temperatura$FECHA..YYMMDD <- as.Date(as.character(df_Temperatura$FECHA..YYMMDD), format = "%y%m%d")
# Agrupar los datos por día y calcular el promedio de la columna "X" para cada día
df_Temperatura <- df_Temperatura %>%
group_by(FECHA..YYMMDD) %>%
summarize(X = mean(X))
# Verificar la cantidad de filas resultantes
nrow(df_Temperatura)
# Convertimos los datos de Humedad horaria a diaria:
# Convertir las columnas de fecha y hora al formato adecuado
df_Humedad$HORA..HHMM. <- sprintf("%04d", df_Humedad$HORA..HHMM.)  # Asegurar que tenga 4 dígitos
df_Humedad$HORA..HHMM. <- as.POSIXct(strptime(df_Humedad$HORA..HHMM., format = "%H%M"), format = "%H%M")
df_Humedad$FECHA..YYMMDD <- as.Date(as.character(df_Humedad$FECHA..YYMMDD), format = "%y%m%d")
# Agrupar los datos por día y calcular el promedio de la columna "X" para cada día
df_Humedad <- df_Humedad %>%
group_by(FECHA..YYMMDD) %>%
summarize(X = mean(X))
# Verificar la cantidad de filas resultantes
nrow(df_Humedad)
#Convertimos los valores Char de nuestras columnas a valores numericos:
df_CO$Registros.validados <- as.numeric(df_CO$Registros.validados)
df_MP10$Registros.validados <- as.numeric(df_MP10$Registros.validados)
df_MP2_5$Registros.validados <- as.numeric(df_MP2_5$Registros.validados)
df_NO$Registros.validados <- as.numeric(df_NO$Registros.validados)
df_NO2$Registros.validados <- as.numeric(df_NO2$Registros.validados)
df_NOX$Registros.validados <- as.numeric(df_NOX$Registros.validados)
df_O3$Registros.validados <- as.numeric(df_O3$Registros.validados)
df_SO2$Registros.validados <- as.numeric(df_SO2$Registros.validados)
df_Humedad$X <- as.numeric(df_Humedad$X)
df_Temperatura$X <- as.numeric(df_Temperatura$X)
#Verificador de valores:
typeof(df_CO$Registros.validados)
typeof(df_NO$Registros.validados)
typeof(df_NO2$Registros.validados)
typeof(df_NOX$Registros.validados)
typeof(df_SO2$Registros.validados)
typeof(df_O3$Registros.validados)
typeof(df_MP10$Registros.validados)
typeof(df_MP2_5$Registros.validados)
typeof(df_Humedad$X)
typeof(df_Temperatura$X)
#Combinamos los dataframes en uno solo:
df <- cbind(SO2 = df_SO2[, "Registros.validados"],
O3 = df_O3[, "Registros.validados"],
NO = df_NO[, "Registros.validados"],
NO2 = df_NO2[, "Registros.validados"],
NOX = df_NOX[, "Registros.validados"],
CO = df_CO[, "Registros.validados"],
Humd = df_Humedad[, "X"],
MP10 = df_MP10[, "Registros.validados"],
MP2_5 = df_MP2_5[, "Registros.validados"],
Temp = df_Temperatura[, "X"])
# Cambiamos el nombre de la comuna "X" por Humd
names(df)[7] <- "Humd"
# Cambiar el nombre de la columna "X.1" por Temp
names(df)[10] <- "Temp"
#Visualizamos los datos del df:
df
#Usamos dim(), head() y str() para visualizar los datos:
dim(df)
head(df)
str(df)
#Usamos mice() y la función complete() para rellenar los datos faltantes:
datos_Faltantes <- mice(df)
df <- complete(datos_Faltantes)
#Visualizamos una porción de los datos:
head(df)
#Revisamos la correlación de las variables utilizando la función cor():
cor_variables <- cor(df)
#Usamos un Heatmap para visualizar los resultados:
heatmap(cor_variables)
#Visualizamos los datos estandar:
df_estandar
#Estandarizamos los datos para aplicar el PCA utilizando la función scale():
df_estandar <- scale(df)
#Visualizamos los datos estandar:
df_estandar
#Realizamos la prueba de PCA con la función prcom() y vemos un resumen con la función summary():
pca <- prcomp(df_estandar)
pca
#Visualizamos el Screeplot del PCA:
screeplot(pca, main = "Principal component analysis (PCA)")
#Visualizamos los resultados del PCA con un biplot:
biplot(pca, cex = 0, main = "Principal component analysis (PCA) Biplot")
#Grafico Matriz de correlación:
chart.Correlation(df)
#Clustering
#Aplicamos K-means con k=3 (3 clusters)
set.seed(123)  # Fijar semilla para reproducibilidad
kmeans_result <- kmeans(df, centers = 3)
#Visualizamos los resultados
plot(df, col = kmeans_result$cluster)
points(kmeans_result$centers, col = 1:3, pch = 8, cex = 2)  # Mostrar centroides
#Ajustamos el GAM del Dataframe
result_gam <- gam(Temp ~ s(SO2) + s(NO) + s(NO2) + s(MP10) + s(CO) + s(Humd) + s(O3) + s(MP2_5) + s(NOX), data = df)
#Visualizamos los resultados
plot(result_gam)
plot(result_gam)
plot(df$Temp, main = "Temperatura desde el 01-01-2015 hasta el 31-12-2017", xlab = "Dias", ylab = "Temperatura", type = "p")
#Luego realizamos la prueba de Augmented Dickey–Fuller para revisar si nuestros datos son estacionarios:
resultado_adf <- ur.df(df$Temp)
#Revisamos los resultados:
print(summary(resultado_adf))
#Revisamos la graficas de acf y pacf para revisar la distribucion de nuestros datos:
#Calculamos y graficamos la función de autocorrelación (ACF)
acf_resultado <- acf(df$Temp, main = "Función de Autocorrelación (ACF)")
#Calculamos y graficamos la función de autocorrelación parcial (PACF)
pacf_resultado <- pacf(df$Temp, main = "Función de Autocorrelación Parcial (PACF)")
#Dividimos los datos en conjuntos de entrenamiento y prueba
prop_entrenamiento <- 0.9
n_entrenamiento <- round(nrow(df) * prop_entrenamiento)
datos_entrenamiento <- df[1:n_entrenamiento, "Temp"]
datos_prueba <- df[(n_entrenamiento + 1):nrow(df), "Temp"]
#Ajustamos automáticamente un modelo SARIMA
modelo_sarima <- arima(datos_entrenamiento, order = c(2,2,1), seasonal = list(order = c(3,3,7), period = 7), include.mean = TRUE)
#Visualizamos el resumen del modelo ajustado
summary(modelo_sarima)
#Realizarmos predicciones con el modelo
predicciones <- forecast(modelo_sarima, h = length(datos_prueba))
#Imprimimos las predicciones
print(predicciones$mean)
#Graficamos una comparación entre los valores reales y los valores estimados:
ggplot() +
geom_line(aes(x = 1:length(datos_prueba), y = datos_prueba), color = "blue", linetype = "solid", size = 1) +
geom_line(aes(x = 1:length(predicciones$mean), y = predicciones$mean), color = "red", linetype = "solid", size = 1) +
labs(x = "Dias", y = "Temperatura", title = "Comparación entre datos de prueba y predicción de los ultimos 110 dias.\n\t(12-09-2017 hasta el 31-12-2017)") +
theme_minimal()
#Graficamos una comparación entre los valores reales y los valores estimados:
ggplot() +
geom_line(aes(x = 1:length(datos_prueba), y = datos_prueba), color = "blue", linetype = "solid", size = 1) +
geom_line(aes(x = 1:length(predicciones$mean), y = predicciones$mean), color = "red", linetype = "solid", size = 1) +
labs(x = "Dias", y = "Temperatura", title = "Comparación valor real (Azul) Vs Valor estimado (Rojo) de los ultimos 110 dias.\n\t(12-09-2017 hasta el 31-12-2017)") +
theme_minimal()
#Graficamos una comparación entre los valores reales y los valores estimados:
ggplot() +
geom_line(aes(x = 1:length(datos_prueba), y = datos_prueba), color = "blue", linetype = "solid", size = 1) +
geom_line(aes(x = 1:length(predicciones$mean), y = predicciones$mean), color = "red", linetype = "solid", size = 1) +
labs(x = "Dias", y = "Temperatura", title = "Comparación valor real (Azul) Vs valor estimado (Rojo) de los ultimos 110 dias.\n\t(12-09-2017 hasta el 31-12-2017)") +
theme_minimal()
#Graficamos una comparación entre los valores reales y los valores estimados:
ggplot() +
geom_line(aes(x = 1:length(datos_prueba), y = datos_prueba), color = "blue", linetype = "solid", size = 1) +
geom_line(aes(x = 1:length(predicciones$mean), y = predicciones$mean), color = "red", linetype = "solid", size = 1) +
labs(x = "Dias", y = "Temperatura", title = "Comparación valor real (Azul) Vs valor estimado (Rojo) de los ultimos 110 dias.\n\t(12-09-2017 hasta el 31-12-2017)") +
theme_minimal()
